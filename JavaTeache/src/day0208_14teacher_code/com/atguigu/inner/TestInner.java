package day0208_14teacher_code.com.atguigu.inner;

/*
7.6.1 概述
1、什么是内部类？
定义/声明在另一个类里面的类叫做内部类。

2.为什么要用内部类？
总的来说：高内聚，低耦合
好处：
（1）可以突破权限修饰符的限制：内部类和外部类可以互相使用对方所有的（包括私有的）成员
（2）内部类通常情况下和外部类的关系非常的紧密，内部类通常都是只为这个外部类服务的。不为其他类服务。
（3）外部类的某些私有的成员不希望别的类了解或访问，只想要给某个类使用，可以了解，可以把这个类定义为外部类的内部类。

生活：
class Body{//身体
    class Heart{
    }
}

3、内部类的形式有四种
（1）成员内部类（方法外）
静态内部类
    【修饰符】 class 外部类{
        【修饰符】 static class 静态内部类{
        }
    }
非静态内部类
    【修饰符】 class 外部类{
        【修饰符】 class 非静态内部类{
        }
    }
（2）局部内部类（方法体里面）
有名字的局部内部类
    【修饰符】 class 外部类{
        【修饰符】 返回值类型 方法名(【形参列表】){
            【修饰符】 class 局部内部类{
            }
        }
    }
匿名的内部类

【修饰符】 class 外部类{
        【修饰符】 返回值类型 方法名(【形参列表】){
            new 父类/父接口(){

            };
        }
    }
 */
public class TestInner {//外部类
    private int a;//这个a是外部类私有的

    class Inner{//内部类
        public void method(){
            //需要直接访问外部类的私有的a
            System.out.println(a);
        }

    }
}

interface A{//外部接口
    interface B{//内部接口

    }
}