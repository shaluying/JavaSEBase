package day0121_11teacher_code.com.atguigu.init;

/*
6.4.3 实例初始化的过程（了解）
1、名词
实例：对象
实例初始化：对象初始化，就是给对象的“实例变量”初始化。
实例变量：它就是成员变量，准确的说，它是指非静态的成员变量。又经常称为属性（理解为事物的属性，即描述事物特征的属性）。

但是很多教科书，或者博客文章也好，会把属性和实例变量做区分。
有get/set方法的实例变量叫属性。

实例初始化的过程就是给实例变量赋初始化的过程。

2、什么时候进行实例初始化？
一定是在new对象的时候

3、哪些代码是和实例初始化有关的？
（1）实例变量声明后面的显式赋值
class MyData{
    private int a = 1; //实例变量声明后面的显式赋值
}

Data（数据）和Date（日期）
Test（测试）和Text（文本）

（2）非静态代码块

（3）构造器

4、实例初始化的过程
（1）实例初始化过程其实是在调用一个<init>的方法
init：initialize单词的缩写，这个单词是初始化的意思。

（2）<init>方法不是由程序员显式声明的，而是由编译器根据上面提到的
A：实例变量声明后面的显式赋值
B：非静态代码块
C：构造器
三个部分的代码按照一定的顺序组装而成的。

（3）一类编写了几个构造器，就会组装成几个<init>方法，
如果程序员没有手动编写任意构造器，那么编译器会根据自动添加的默认的无参构造自动组装一个无参的<init>方法。


5、<init>方法如何组装以下三个部分代码：
A：实例变量声明后面的显式赋值
B：非静态代码块
C：构造器

（1）先把构造器首行的super()或super(实参列表）提前出来，放到<init>方法的首行
（2）按照程序员编写的A和B的自然顺序，依次组装它俩
（3）把构造器剩下的代码组装到（2）的下面

class A{
    private int a = 1;
    {
        System.out.println("非静态代码块1");
    }
}

A类的init方法组装完是
<init>(){
    a = 1;
    System.out.println("非静态代码块1");
}

class B{

    {
        System.out.println("非静态代码块2");
    }
    private int a = 2;
}

A类的init方法组装完是
<init>(){
    System.out.println("非静态代码块2");
    a = 2;
}


6、验证一下

7、总结
（1）我们new调用构造器，本质上是执行它对应的<init>方法
（2）每一个构造器都会有自己对应的<init>方法，它由这些代码组成：
A：super()或super(实参列表） ==> 已经不仅仅代表父类的构造器，而且代表父类构造器对应的<init>方法
B：当前类的 实例变量声明后的显式赋值表达式语句 和非静态代码块按照编写的顺序依次组装
C：构造器剩下的代码（除了super()或super(实参列表）的代码）




 */
public class TestInitialize {
    public static void main(String[] args) {
        MyData my = new MyData();
    }
}
